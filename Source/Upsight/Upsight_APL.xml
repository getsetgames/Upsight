<?xml version="1.0" encoding="utf-8"?>
<!-- Upsight Android documentation available at http://help.upsight.com/api_sdk_reference/android/#analytics-module-dependencies -->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="Upsight init"/>
		<setStringFromProperty result="sUpsightAppToken"   ini="Engine" section="/Script/Upsight.UpsightSettings" property="ApplicationToken"         default=""/>
		<setStringFromProperty result="sUpsightPublicKey"  ini="Engine" section="/Script/Upsight.UpsightSettings" property="PublicKey"                default=""/>
		<setStringFromProperty result="sUpsightSenderID"   ini="Engine" section="/Script/Upsight.UpsightSettings" property="PushNotificationSenderID" default=""/>

		<setBoolFromProperty result="bUpsightIncludeAnalytics"         ini="Engine" section="/Script/Upsight.UpsightSettings" property="IncludeAnalytics"         default="false"/>
		<setBoolFromProperty result="bUpsightIncludeMangedVariables"   ini="Engine" section="/Script/Upsight.UpsightSettings" property="IncludeManagedVariables"  default="false"/>
		<setBoolFromProperty result="bUpsightIncludeMarketing"         ini="Engine" section="/Script/Upsight.UpsightSettings" property="IncludeMarketing"         default="false"/>
		<setBoolFromProperty result="bUpsightIncludeAdvertisingID"     ini="Engine" section="/Script/Upsight.UpsightSettings" property="IncludeAdvertisingID"     default="false"/>
		<setBoolFromProperty result="bUpsightIncludePushNotifications" ini="Engine" section="/Script/Upsight.UpsightSettings" property="IncludePushNotifications" default="false"/>
		<setBoolFromProperty result="bUpsightEnableLogging"            ini="Engine" section="/Script/Upsight.UpsightSettings" property="EnableLogging"            default="false"/>
	</init>

  	<AARImports>
  		<insertValue value="repositories $S(PluginDir)/../../Source/ThirdParty/AndroidRepository"/>
		<insertNewline/>

		<insert>
com.upsight.android,core,4.1.1
		</insert>

		<if condition="bUpsightIncludeAnalytics">
			<true>
				<insert>
com.upsight.android,analytics,4.1.1
				</insert>
			</true>
		</if>

		<if condition="bUpsightIncludeMarketing">
			<true>
				<insert>
com.upsight.android,marketing,4.1.1
				</insert>
			</true>
		</if>

		<if condition="bUpsightIncludePushNotifications">
 			<true>
 				<insert>
com.google.android.gms,play-services-gcm,9.2.0
				</insert>
			</true>
		</if>	
  	</AARImports>

	<!-- optional updates applied to AndroidManifest.xml -->
	<androidManifestUpdates>
		<setStringFromAttribute result="PackageName" tag="manifest" name="package"/>
		
		<setElement    result="upsight-meta-data-app-token"  value="meta-data"/>
	    <addAttribute     tag="$upsight-meta-data-app-token"  name="android:name"  value="com.upsight.app_token"/>
	    <addAttribute     tag="$upsight-meta-data-app-token"  name="android:value" value="$S(sUpsightAppToken)"/>
    	<addElement       tag="application"                   name="upsight-meta-data-app-token"/>

		<setElement    result="upsight-meta-data-pub-key"  value="meta-data"/>
	    <addAttribute     tag="$upsight-meta-data-pub-key"  name="android:name"  value="com.upsight.public_key"/>
	    <addAttribute     tag="$upsight-meta-data-pub-key"  name="android:value" value="$S(sUpsightPublicKey)"/>
    	<addElement       tag="application"                 name="upsight-meta-data-pub-key"/>

 		<setElement    result="upsight-provider"  value="provider"/>
	    <addAttribute     tag="$upsight-provider"  name="android:name"        value="com.upsight.android.internal.persistence.ContentProvider"/>
	    <addAttribute     tag="$upsight-provider"  name="android:authorities" value="$S(PackageName).upsight"/>
	    <addAttribute     tag="$upsight-provider"  name="android:enabled"     value="true"/>
	    <addAttribute     tag="$upsight-provider"  name="android:exported"    value="false"/>
    	<addElement       tag="application"        name="upsight-provider"/>

    	<addElements tag="application">
        	<meta-data android:name="com.upsight.extension.analytics" android:value="com.upsight.android.UpsightAnalyticsExtension" />
			<service   android:name="com.upsight.android.analytics.internal.DispatcherService" />

 			<receiver android:name="com.upsight.android.analytics.internal.dispatcher.schema.NetworkChangeBroadcastReceiver" >
            	<intent-filter>
                	<action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
            	</intent-filter>
        	</receiver>

        	<meta-data android:name="com.upsight.core" android:value="com.upsight.android.internal.CoreComponentFactory" />
    	</addElements>

		<if condition="bUpsightIncludePushNotifications">
 			<true>
 				<!-- uses-permission additions -->
				<setElement    result="upsight-c2d-uses-permission"  value="uses-permission"/>
				<addAttribute     tag="$upsight-c2d-uses-permission"  name="android:name" value="$S(PackageName).permission.C2D_MESSAGE"/>
				<addElement       tag="manifest"                      name="upsight-c2d-uses-permission"/>

				<addPermission android:name="android.permission.INTERNET" />
				<addPermission android:name="android.permission.WAKE_LOCK" />
    			<addPermission android:name="com.google.android.c2dm.permission.RECEIVE" />

				<setElement    result="upsight-c2d-permission"  value="permission"/>
				<addAttribute     tag="$upsight-c2d-permission"  name="android:name"            value="$S(PackageName).permission.C2D_MESSAGE"/>
				<addAttribute     tag="$upsight-c2d-permission"  name="android:protectionLevel" value="signature"/>
				<addElement       tag="manifest"                 name="upsight-c2d-permission"/>

				<setElement    result="upsight-gcm"  value="meta-data"/>
				<addAttribute     tag="$upsight-gcm"  name="android:name"  value="com.upsight.gcm"/>
				<addAttribute     tag="$upsight-gcm"  name="android:value" value="$S(PackageName).$S(sUpsightSenderID)"/>
				<addElement      tag="application"    name="upsight-gcm"/>

				<setElement    result="upsight-broadcast-receiver"  value="receiver"/>
				<addAttribute     tag="$upsight-broadcast-receiver"  name="android:name"       value="com.upsight.android.googlepushservices.internal.PushBroadcastReceiver"/>
				<addAttribute     tag="$upsight-broadcast-receiver"  name="android:permission" value="com.google.android.c2dm.permission.SEND"/>

				<setElement result="upsight-broadcast-receiver-intent-filter" value="intent-filter"/>
				<addElements tag="$upsight-broadcast-receiver-intent-filter">
					<action android:name="com.google.android.c2dm.intent.RECEIVE" />
				</addElements>

				<setElement   result="upsight-broadcast-receiver-intent-filter-category"   value="category"/>
				<addAttribute    tag="$upsight-broadcast-receiver-intent-filter-category"   name="android:name"  value="$S(PackageName)"/>
				<addElement      tag="$upsight-broadcast-receiver-intent-filter"            name="upsight-broadcast-receiver-intent-filter-category"/>

				<addElement tag="$upsight-broadcast-receiver" name="upsight-broadcast-receiver-intent-filter"/> 		
				<addElement tag="application"                 name="upsight-broadcast-receiver"/>

				<addElements tag="application">
					<meta-data android:name="com.upsight.extension.googlepushservices" android:value="com.upsight.android.UpsightGooglePushServicesExtension" />
					<service android:name="com.upsight.android.googlepushservices.internal.PushIntentService" />
        			<service android:name="com.upsight.android.googlepushservices.internal.PushClickIntentService" />

        			<meta-data android:name="com.upsight.extension.marketing" android:value="com.upsight.android.UpsightMarketingExtension" />
        			<activity android:name="com.upsight.android.marketing.internal.billboard.BillboardManagementActivity" android:theme="@android:style/Theme.Translucent.NoTitleBar" />
        		</addElements>
	    	</true>
      	</if>

	</androidManifestUpdates> 

	<!-- optional additions to proguard -->
	<proguardAdditions>
		<insert>
<![CDATA[
		-keep class com.squareup.otto.Bus
		-keep class rx.** { *; }
		-keep class dagger.** { *; }
		-keep class android.support.v4.** { *; }
		-keep class com.google.android.gms.** { *; }
		-keep class rx.android.schedulers.HandlerScheduler

		# Upsight
		-keep class com.upsight.android.** { *; }
		-keep interface com.upsight.android.** { *; }

		# Upsight Mediation
		-dontwarn com.nuance.nmdp.speechkit.**
		-dontwarn com.google.ads.**
		-dontwarn android.webkit.**
		-dontwarn android.support.v4.**
		-dontwarn com.unity3d.**
		-keep class com.upsight.mediation.** { *; }
		-keep class com.vungle.** { *; }
		-keep class javax.** { *; }
		-keepattributes JavascriptInterface
		-keepattributes *Annotation*
		-keep class sun.misc.Unsafe { *; }
		-keepattributes Signature

		# Jackson
		-dontwarn com.fasterxml.jackson.databind.**
		-keepattributes *Annotation*,EnclosingMethod,Signature
		-keepnames class com.fasterxml.jackson.** { *; }
		-keepclassmembers public final enum com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility {
		    public static final com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility *;
		}

		# Rx
		-dontwarn sun.misc.**
		-keep class rx.schedulers.Schedulers {
		    public static <methods>;
		}
		-keep class rx.schedulers.ImmediateScheduler {
		    public <methods>;
		}
		-keep class rx.schedulers.TestScheduler {
		    public <methods>;
		}
		-keep class rx.schedulers.Schedulers {
		    public static ** test();
		}
		-keepclassmembers class rx.internal.util.unsafe.*ArrayQueue*Field* {
		    long producerIndex;
		    long consumerIndex;
		}
		-keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef {
		    long producerNode;
		    long consumerNode;
		}
]]>
		</insert>
	</proguardAdditions>
	
	<!-- optional files or directories to copy to Intermediate/Android/APK -->

 	<prebuildCopies>
 		<copyDir src="$S(EngineDir)/Plugins/GSG/Upsight/lib/Android/libs" dst="$S(BuildDir)/libs" /> 
		<copyDir src="$S(EngineDir)/Plugins/GSG/Upsight/lib/Android/JavaLibs/io.reactivex-rxandroid-1.0.1" dst="$S(BuildDir)/JavaLibs/io.reactivex-rxandroid-1.0.1" />

		<if condition="bUpsightIncludeMangedVariables">
			<true>
				<copyDir src="$S(EngineDir)/Plugins/GSG/Upsight/lib/Android/JavaLibs/com.upsight.android-managed-variables-4.1.1" dst="$S(BuildDir)/JavaLibs/com.upsight.android-managed-variables-4.1.1" />
			</true>
		</if>

		<if condition="bUpsightIncludeAdvertisingID">
			<true>
				<copyDir src="$S(EngineDir)/Plugins/GSG/Upsight/lib/Android/JavaLibs/com.upsight.android-google-advertising-id-4.1.1" dst="$S(BuildDir)/JavaLibs/com.upsight.android-google-advertising-id-4.1.1" />
			</true>
		</if>

		<if condition="bUpsightIncludePushNotifications">
 			<true>
				<copyDir src="$S(EngineDir)/Plugins/GSG/Upsight/lib/Android/JavaLibs/com.upsight.android.googlepushservices-4.1.1" dst="$S(BuildDir)/JavaLibs/com.upsight.android.googlepushservices-4.1.1" />
 			</true>
 		</if>

	</prebuildCopies>

	<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		<insert>
import com.upsight.android.*;
import com.upsight.android.analytics.UpsightGooglePlayHelper;
import com.upsight.android.analytics.event.UpsightCustomEvent;
import com.upsight.android.analytics.event.UpsightPublisherData;
import com.upsight.android.analytics.event.milestone.UpsightMilestoneEvent;
import com.upsight.android.analytics.event.monetization.UpsightMonetizationEvent;
import com.upsight.android.analytics.event.monetization.UpsightMonetizationIapEvent;

import com.upsight.android.googlepushservices.UpsightPushBillboard;
import com.upsight.android.logger.UpsightLogger;
import com.upsight.android.marketing.UpsightReward;
import com.upsight.android.marketing.UpsightPurchase;
import com.upsight.android.marketing.UpsightBillboard;
import com.upsight.android.marketing.UpsightBillboardHandlers;
import com.upsight.android.marketing.UpsightMarketingContentStore;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.EnumSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
		</insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert><![CDATA[

public native void nativeUpsightBillboardOnPurchases(String[] productIDs, int[] quantities);
public native void nativeUpsightBillboardOnRewards(String[] productIDs, int[] quantities, String[] signatureDatas);
public native void nativeUpsightBillboardOnNextView();
public native void nativeUpsightBillboardOnDetach();

private UpsightContext   mUpsight;
private UpsightBillboard mUpsightPushBillboard;
private Intent           mUpsightPurchaseResultIntent;

private ConcurrentHashMap<String, UpsightBillboard> mUpsightBillboards = new ConcurrentHashMap<>();

public void AndroidThunkJava_UpsightRecordAnalyticsEventWithName(String eventName, String[] keys, String[] values)
{
	Log.debug("AndroidThunkJava_UpsightRecordAnalyticsEventWithName - event:" + eventName + ", keys:" + keys + ", values:" + values);

	UpsightCustomEvent.Builder b = UpsightCustomEvent.createBuilder(eventName);

	for (int i = 0; i < keys.length; i++)
	{
		b.put(keys[i], values[i]);
    }

    b.record(mUpsight);
}

public void AndroidThunkJava_UpsightRecordMilestoneEventForScope(String scope, String[] keys, String[] values, boolean withCallbackSetup)
{
	final String   fScope  = scope;
    final String[] fKeys   = keys;
    final String[] fValues = values;

    _activity.runOnUiThread(new Runnable()
    {
        @Override
        public void run()
        {
			try
			{
	            Boolean bIsContentReady = UpsightMarketingContentStore.isContentReady(mUpsight, fScope);
	            UpsightBillboard billboard = null;

	            // Get rid of the curent billboard we are tracking a new one will be created
	            //
				if (mUpsightBillboards.containsKey(fScope))
                {
                    mUpsightBillboards.get(fScope).destroy();
                    mUpsightBillboards.remove(fScope);
                }

				String sIsContentReady = bIsContentReady ? "ready" : "not ready";

				Log.debug("AndroidThunkJava_UpsightRecordMilestoneEventForScope - scope: " + fScope + " content is '" + sIsContentReady + "'");

	            if (bIsContentReady)
	            {
	                billboard = UpsightBillboard.create(mUpsight, fScope, new UpsightBillboardHandlers.DefaultHandler(_activity)
	                {
	                    @Override
	                    public void onPurchases(List<UpsightPurchase> list)
	                    {
	                        String[] productIDs = new String[list.size()];
	                        int[]    quantities = new int[list.size()];

	                        for (int i = 0; i < list.size(); i++)
	                        {
	                            UpsightPurchase purchase = list.get(i);

	                            String p = purchase.getProduct();
	                            int    q = purchase.getQuantity();

	                            productIDs[i] = p;
	                            quantities[i] = q;
	                        }

	                        nativeUpsightBillboardOnPurchases(productIDs, quantities);
	                    }

	                    @Override
	                    public void onRewards(List<UpsightReward> list)
	                    {
	                        String[] productIDs     = new String[list.size()];
	                        int[]    quantities     = new int[list.size()];
	                        String[] signatureDatas = new String[list.size()];

	                        for (int i = 0; i < list.size(); i++)
	                        {
	                            UpsightReward reward = list.get(i);

	                            String     p = reward.getProduct();
	                            int        q = reward.getQuantity();
	                            JSONObject j = reward.getSignatureData();

	                            productIDs[i]     = p;
	                            quantities[i]     = q;
	                            signatureDatas[i] = j.toString();
	                        }

	                        nativeUpsightBillboardOnRewards(productIDs, quantities, signatureDatas);
	                    }

	                    @Override
	                    public void onNextView()
	                    {
							nativeUpsightBillboardOnNextView();
	                    }

	                    @Override
	                    public void onDetach()
	                    {
							nativeUpsightBillboardOnDetach();
	                    }
	                });
	            }
	            else
	            {
	            	billboard = UpsightBillboard.create(mUpsight, fScope, new UpsightBillboardHandlers.DefaultHandler(_activity)
	                {
	                    @Override
	                    public UpsightBillboard.AttachParameters onAttach(String scope)
	                    {
	                    	return null;
	                    }
	                });
	            }

	            mUpsightBillboards.put(fScope, billboard);

	            // Record the milestone event
	            //
	            UpsightMilestoneEvent.Builder b = UpsightMilestoneEvent.createBuilder(fScope);

	            for (int i = 0; i < fKeys.length; i++)
	            {
	                b.put(fKeys[i], fValues[i]);
	            }

	            b.record(mUpsight);
	        }
	        catch(Exception e)
	        {
	        	Log.debug("AndroidThunkJava_UpsightRecordMilestoneEventForScope - exception: " + e.getMessage());
	        }
	    }
    });
}

public void AndroidThunkJava_UpsightRecordMonetizationEvent(int resolution, String productID, int quantity, String currency, float price, String[] keys, String[] values)
{
    UpsightMonetizationEvent
            .createBuilder(new Double(price * quantity), currency)
            .setResolution(Integer.toString(resolution))
            .setProduct(productID)
            .setQuantity(quantity)
            .setPrice(new Double(price))
            .record(mUpsight);
}

public void AndroidThunkJava_UpsightRecordMonetizationEventWithTotalPrice(int resolution, String productID, int quantity, String currency, float price, float totalPrice, String[] keys, String[] values)
{
    UpsightMonetizationEvent
            .createBuilder(new Double(totalPrice), currency)
            .setResolution(Integer.toString(resolution))
            .setProduct(productID)
            .setQuantity(quantity)
            .setPrice(new Double(price))
            .record(mUpsight);
}

public void AndroidThunkJava_UpsightRecordInAppPurchaseEvent(int resolution, String productID, int quantity, String currency, float price, float totalPrice, String store, String bundle, String[] keys, String[] values)
{
	Log.debug("AndroidThunkJava_UpsightRecordInAppPurchaseEvent - resolution:" + resolution + ", product ID:" + productID + ", quantity:" + quantity + ", currency:" + currency + ", price:" + price + ", totalPrice:" + totalPrice + ", store:" + store + ", bundle:" + bundle + ", keys:" + keys + ", values:" + values);

	UpsightPublisherData.Builder upsightPublisherDataBuilder = new UpsightPublisherData.Builder();

	for (int i = 0; i < keys.length; i++)
	{
    	upsightPublisherDataBuilder.put(keys[i], values[i]);
	}

	UpsightPublisherData upsightPurchasePublisherData = upsightPublisherDataBuilder.build();

	try
	{
	    UpsightGooglePlayHelper.trackPurchase(mUpsight, quantity, currency, new Double(price), new Double(totalPrice), productID, mUpsightPurchaseResultIntent, upsightPurchasePublisherData);
	}
	catch (Exception e)
	{
		Log.debug("AndroidThunkJava_UpsightRecordInAppPurchaseEvent - exception tracking purchase: " + e.getMessage());
	}
}

public void AndroidThunkJava_UpsightBillboardForScopeRegisterForCallbacks(String scope)
{
	final String fScope = scope;

	Log.debug("AndroidThunkJava_UpsightBillboardForScopeRegisterForCallbacks - scope:" + fScope);

	_activity.runOnUiThread(new Runnable() 
	{
    	@Override
        public void run() 
        {                
			try
			{
			    UpsightBillboard billboard = UpsightBillboard.create(mUpsight, fScope, new UpsightBillboardHandlers.DefaultHandler(_activity)
			    {
			 		@Override
			        public void onPurchases(List<UpsightPurchase> list)
			        {
						Log.debug("AndroidThunkJava_UpsightBillboardForScopeRegisterForCallbacks::onPurchases - scope:" + fScope);

			            String[] productIDs = new String[list.size()];
			            int[]    quantities = new int[list.size()];

			            for (int i = 0; i < list.size(); i++)
			            {
			                UpsightPurchase purchase = list.get(i);

			                String p = purchase.getProduct();
			                int    q = purchase.getQuantity();

			                productIDs[i] = p;
			                quantities[i] = q;
			            }

			            nativeUpsightBillboardOnPurchases(productIDs, quantities);
			        }

			        @Override
			        public void onRewards(List<UpsightReward> list)
			        {
						Log.debug("AndroidThunkJava_UpsightBillboardForScopeRegisterForCallbacks::onRewards - scope:" + fScope);

			            String[]  productIDs     = new String[list.size()];
			            int[]     quantities     = new int[list.size()];
			            String[]  signatureDatas = new String[list.size()];

			            for (int i = 0; i < list.size(); i++)
			            {
			                UpsightReward reward = list.get(i);

			                String     p = reward.getProduct();
			                int        q = reward.getQuantity();
			                JSONObject j = reward.getSignatureData();

			                productIDs[i]     = p;
			                quantities[i]     = q;
			                signatureDatas[i] = j.toString();
			            }

			            nativeUpsightBillboardOnRewards(productIDs, quantities, signatureDatas);
			        }

			        @Override
			        public void onNextView()
			        {
						nativeUpsightBillboardOnNextView();
			        }

			        @Override
			        public void onDetach()
			        {
						nativeUpsightBillboardOnDetach();
			        }
			    });

		    	mUpsightBillboards.put(fScope, billboard);
		    }
			catch (Exception e)
			{
				Log.debug("AndroidThunkJava_UpsightBillboardForScopeRegisterForCallbacks - exception creating billboard for scope - '" + fScope + "': " + e.getMessage());
			}
	    }
    });
}

public void AndroidThunkJava_UpsightBillboardForScopeUnregisterForCallbacks(String scope)
{
	final String fScope = scope;

	_activity.runOnUiThread(new Runnable() 
	{
    	@Override
        public void run() 
        {  
			if (mUpsightBillboards.containsKey(fScope)) 
			{
				mUpsightBillboards.get(fScope).destroy();
				mUpsightBillboards.remove(fScope);
			}
			else
			{
				Log.debug("AndroidThunkJava_UpsightBillboardForScopeUnregisterForCallbacks - couldn't find billboard for scope: " + fScope);
			}
		}
	});
}

public void AndroidThunkJava_UpsightBillboardUnregisterCallbacks()
{
	for (UpsightBillboard b : mUpsightBillboards.values())
    {
        b.destroy();
    }
    
    Set<String> keys = mUpsightBillboards.keySet();
    
    for (String s : keys) 
    {
        mUpsightBillboards.remove(s);
    }
}

public boolean AndroidThunkJava_UpsightBillboardForScopeIsContentReady(String scope)
{
	Log.debug("AndroidThunkJava_UpsightBillboardForScopeIsContentReady - scope:" + scope);

	return UpsightMarketingContentStore.isContentReady(mUpsight, scope);
}
		]]></insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>

	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
mUpsight = Upsight.createContext(this.getApplicationContext());
		</insert>

		<if condition="bUpsightEnableLogging">
			<true>
				<insert>
mUpsight.getLogger().setLogLevel(Upsight.LOG_TAG, EnumSet.allOf(UpsightLogger.Level.class));
				</insert>
			</true>
		</if>
	
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>

		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
		<insert>
AndroidThunkJava_UpsightBillboardUnregisterCallbacks();
		</insert>

		<if condition="bUpsightIncludePushNotifications">
 			<true> 			
				<insert>
mUpsightPushBillboard.destroy();
				</insert>
			</true>
		</if>
	</gameActivityOnPauseAdditions>


	<!-- optional additions to GameActivity onResume in GameActivity.java	-->
	<gameActivityOnResumeAdditions>
		<if condition="bUpsightIncludePushNotifications">
 			<true>
				<insert>
UpsightBillboard.Handler UpsightPushBillboardHandler = UpsightBillboardHandlers.forDefault(this);

mUpsightPushBillboard = UpsightPushBillboard.create(mUpsight, UpsightPushBillboardHandler);
				</insert>
			</true>
		</if>
	</gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
		<insert><![CDATA[
// This is the request code for purchases taken from GameActivity
//			
if (requestCode == 1001)
{
	mUpsightPurchaseResultIntent = new Intent(data);
}
		]]></insert>
	</gameActivityOnActivityResultAdditions>
	

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>

	</soLoadLibrary>
</root>
